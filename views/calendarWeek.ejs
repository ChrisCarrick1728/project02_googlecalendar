<!DOCTYPE html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title></title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="../../css/header.css">
    <link rel="stylesheet" href="../../css/main.css">
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script src="https://unpkg.com/vuejs-datepicker"></script>
  </head>
  <body>
    <div id="app">
      <% include ./partials/header.ejs %>
      <section id="calendar">
      <% include ./partials/topbar.ejs %>

      <!-- Default view - Month Calendar -->
      <div class="monthHeader">
        <div class="dayTitle"><p>Sunday</p></div>
        <div class="dayTitle"><p>Monday</p></div>
        <div class="dayTitle"><p>Tuesday</p></div>
        <div class="dayTitle"><p>Wednesday</p></div>
        <div class="dayTitle"><p>Thursday</p></div>
        <div class="dayTitle"><p>Friday</p></div>
        <div class="dayTitle"><p>Saturday</p></div>
      </div>
      <div class="weekViewEvents">
        <div class="dayInWeekView day" v-for="days in weeks" v-on:click="changeDay(days.day, days.month)">
          <div class="dayDivHeaders">{{days.day}} <span v-show="false">{{monthEvents[days.date].hasEvent}}</span></div>
          <div class="weekDayEvents" v-if="monthEvents[days.date].hasEvent" v-for="events in monthEvents[days.date].events">
            <div><button type="button" v-on:click="editEvents(days.date, events.id)">{{events.summary}}</button></div>
          </div>
        </div>
      </div>
      <div class="weekView">
        <div class="dayInWeekView" v-for="days in weeks">
          <div v-if="days.day == day && days.month == month" class="selectedDay">
            
          </div>
          <div v-else class="nonSelectedDay">
          </div>
        </div>
      </div>

      <!-- Display month name -->
      <div id="monthName">
        <h3>{{monthName}}</h3>
      </div> 
      <!-- Create Event -->
      <div id="creatEvent">
        <button type="button" v-on:click="createEvent()">+ New Event</button>
      </div>
      <!-- Go back to today -->
      <div id="today">
        <button type="button" v-on:click="goToToday()">Today: {{this.monthNames[this.today.month]}} {{this.today.day}}, {{this.today.year}}</button>
      </div>

      <!-- Edit Event Overlay -->
      <div v-if="displayEditEvent" class="overlay">
          <div class="formDiv">
            <div class ="innerFormDiv">
              <h3>Edit your Event Details:</h3>
              <form action="none">
                <label for="summary">Title:</label></br>
                  <input type="text" name="summary" id="summary" v-model="editEvent.summary" required></br>
                <label for="allDay">All Day:</label>
                  <input type="checkbox" name="allDay" id="allDay" v-model="editEvent.allDay">
                <label for="startDate">Starts</label></br>
                  <input type="date" name="startDate" id="startDate" value="" v-model="editEvent.startDate" required>
                  <input v-show="!editEvent.allDay" type="time" name="startTime" id="startTime" step="900" v-model="editEvent.startTime" required></br>
                <label for="endDate">Ends</label></br>
                  <input type="date" name="endDate" id="endDate" v-model="editEvent.endDate" required>
                  <input v-show="!editEvent.allDay" type="time" name="endTime" id="endTime" step="900" v-model="editEvent.endTime" required></br>
                <button type="button" v-on:click="edit(editEventId)">Edit Event</button>
                <button type="button" v-on:click="deleteEvent(editEventId)">Delete</button>
                <button type="button" v-on:click="displayEditEvent = !displayEditEvent">Cancel</button>
              </form>
            </div>
          </div>
        </div>

      <!-- Add Event Overlay -->
      <div v-show="displayAddEvent" class="overlay">
        <div class="formDiv">
          <div class ="innerFormDiv">
            <h3>Add a new Event:</h3>
            <form action="none">
              <label for="summary">Title:</label></br>
                <input type="text" name="summary" id="summary" v-model="addEvent.summary" required></br>
              <label for="allDay">All Day:</label>
                <input type="checkbox" name="allDay" id="allDay" v-model="addEvent.allDay">
              <label for="startDate">Starts</label></br>
                <input type="date" name="startDate" id="startDate" value="" v-model="addEvent.startDate" required>
                <input v-show="!addEvent.allDay" type="time" name="startTime" id="startTime" step="900" v-model="addEvent.startTime" required></br>
              <label for="endDate">Ends</label></br>
                <input type="date" name="endDate" id="endDate" v-model="addEvent.endDate" required>
                <input v-show="!addEvent.allDay" type="time" name="endTime" id="endTime" step="900" v-model="addEvent.endTime" required></br>
              <button type="button" v-on:click="insert()">Add Event</button>
              <button type="button" v-on:click="displayAddEvent = !displayAddEvent">Cancel</button>
            </form>
          </div>
        </div>
      </div>
      </section>   
    </div>
    <script>
      var app = new Vue({
        el: '#app',
        components: {
          datepicker: vuejsDatepicker
        },
        data: {
          vName: '<%= name %>',
          message: 'you have been authenticated',
          monthData: '',
          weeks: {},
          monthEvents: '',
          day: '',
          month: '',
          year: '',
          dateParam: '<%= date %>',
          calData: '',
          view: '<%= view %>',
          showEvents: false,
          numRows: '',
          monthName: 'January',
          today: {
            'day': '<%= today.day %>',
            'month': '<%= today.month %>',
            'year': '<%= today.year %>'
          },
          displayAddEvent: false,
          displayEditEvent: false,
          editEventId: '',
          editEventDate: '',
          addEvent: {
            summary: '',
            startDate: '',
            startTime: '',
            endDate: '',
            endTime: '',
            allDay: true
          },
          editEvent: {
            summary: '',
            startDate: '',
            startTime: '',
            endDate: '',
            endTime: '',
            allDay: true
          },
          monthNames: {
            0: 'January',
            1: 'Feburary',
            2: 'March',
            3: 'April',
            4: 'May',
            5: 'June',
            6: 'July',
            7: 'August',
            8: 'September',
            9: 'October',
            10: 'November',
            11: 'December'
          }         
        },
        methods: {
          nextMonth: function(day, month, year) {
            var numDaysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30 ,31, 29]
            if (day + 7 >= numDaysInMonth[month - 1]) {
              day = 1 + numDaysInMonth[month - 1] - day;
              if (month + 1 == 13) {  
                month = 1;
                year++;
              } else {
                month++
              }
            } else {
              day += 7
            }
            this.day = day
            this.month = month
            this.year = year;
            getWeekView(day, month, year)
            var url = (this.month + '-' + this.day + '-' + this.year)
            this.dateParam = url
            window.history.pushState({}, "", url)
            this.monthName = this.monthNames[this.month - 1]

          },
          prevMonth: function(day, month, year) {
            var numDaysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30 ,31, 29]
            if (day - 7 <= 0) {
              if (month - 1 == 0) {
                month = 12;
                year--;
              } else {
                month--;
              }
              day = numDaysInMonth[month - 1] - day
            } else {
              day--
            }
            this.day = day
            this.month = month
            this.year = year;
            getWeekView(day, month, year)
            var url = (this.month + '-' + this.day + '-' + this.year)
            this.dateParam = url
            window.history.pushState({}, "", url)
            this.monthName = this.monthNames[this.month - 1]
          },
          changeDay: function(day, month) {
            month = parseInt(month)
            day = parseInt(day)
            this.day = day
            if (this.month != month) {
              
              if (this.month > month) {
                this.prevMonth(month + 1, this.year)
              } else {
                this.nextMonth(month - 1, this.year)
              }
            } else {
              this.month = month
              var url = (this.month + '-' + this.day + '-' + this.year)
              this.dateParam = url
              window.history.pushState({}, "", url)
              this.monthName = this.monthNames[this.month - 1]
            }

          },
          createEvent: function() {
            var d = new Date();
            d.setFullYear(this.year, this.month - 1, this.day -1)
            this.addEvent.startDate = d.toISOString().split('T')[0]
            this.addEvent.endDate = d.toISOString().split('T')[0]
            this.displayAddEvent = true;
          },
          goToToday: function() {
            this.month = this.today.month + 1
            this.day = this.today.day
            this.year = this.today.year
            getMonthView(this.month, this.year)
            var url = (this.month + '-' + this.day + '-' + this.year)
            window.history.pushState({}, "", url)
            this.monthName = this.monthNames[this.month - 1]
          },
          insert: function() {
            var startDateTime = new Date(this.addEvent.startDate)
            var sTime = this.addEvent.startTime
            if (sTime != '') {
              var sTime = sTime.split(':')
              startDateTime.setHours(sTime[0], sTime[1])
              startDateTime.setDate(startDateTime.getDate())
            } else {
              startDateTime.setUTCHours(0)
            }
            var endDateTime = new Date(this.addEvent.endDate)
            var eTime = this.addEvent.endTime
            if (eTime != '') {
              var eTime = eTime.split(':')
              endDateTime.setHours(eTime[0], eTime[1])
              endDateTime.setDate(endDateTime.getDate())
            } else {
              endDateTime.setUTCHours(0)
            }

            if (this.addEvent.allDay) {
              var event = {
                'summary': this.addEvent.summary,
                'start': {
                  'date': startDateTime.toISOString().split('T')[0]
                },
                'end': {
                  'date': endDateTime.toISOString().split('T')[0]
                }
              }
            } else {
              var event = {
                'summary': this.addEvent.summary,
                'start': {
                  'dateTime': startDateTime.toISOString()
                },
                'end': {
                  'dateTime': endDateTime.toISOString()
                }
              }
            }
            var params = {
              'event': event
            }

            axios.post('/services/insert', params)
              .then((res) => {
                this.displayAddEvent = false;
                getWeekView(this.month, this.year)
              })

          },
          editEvents: function(date, id) {
            this.editEventId = id
            this.editEventDate = date
            //console.log(typeof(this.monthEvents[date].events[id].start.dateTime))
            if (typeof(this.monthEvents[date].events[id].start.dateTime) == 'undefined') {
              // all day event
              this.editEvent.startDate = this.monthEvents[date].events[id].start.date
              this.editEvent.endDate = this.monthEvents[date].events[id].end.date
              this.editEvent.allDay = true

            } else {
              // Has time
              var sDate = this.monthEvents[date].events[id].start.dateTime
              var eDate = this.monthEvents[date].events[id].end.dateTime
              var sd = new Date(sDate)
              var ed = new Date(eDate)
              sTime = sd.toTimeString().split(':')
              eTime = ed.toTimeString().split(':')
              this.editEvent.startTime = sTime[0] + ":" + sTime[1]
              this.editEvent.endTime = eTime[0] + ":" + eTime[1]
              this.editEvent.startDate = sd.toISOString().split('T')[0]
              this.editEvent.endDate = ed.toISOString().split('T')[0]
              this.editEvent.allDay = false
            }
            this.editEvent.summary = this.monthEvents[date].events[id].summary
            this.displayEditEvent = true
          },
          deleteEvent: function(id) {
            if (confirm("Are you sure you want to delete this event?")) {
              var params = {
                'id': id
              }
              axios.delete('/services/deleteEvent/' + id, params)
                .then((res) => {
                  if (res.status == 200) {
                    getWeekView(this.month, this.year) 
                    this.displayEditEvent = false                   
                  }
                })
            } 
          },
          edit: function(id) {
            var startDateTime = new Date(this.editEvent.startDate)
            var sTime = this.editEvent.startTime
            if (sTime != '') {
              var sTime = sTime.split(':')
              startDateTime.setHours(sTime[0], sTime[1])
              startDateTime.setDate(startDateTime.getDate() + 1)
            } else {
              startDateTime.setUTCHours(0)
            }
            var endDateTime = new Date(this.editEvent.endDate)
            var eTime = this.editEvent.endTime
            if (eTime != '') {
              var eTime = eTime.split(':')
              endDateTime.setHours(eTime[0], eTime[1])
              endDateTime.setDate(endDateTime.getDate() + 1)
            } else {
              endDateTime.setUTCHours(0)
            }

            if (this.editEvent.allDay) {
              var event = {
                'summary': this.editEvent.summary,
                'start': {
                  'date': startDateTime.toISOString().split('T')[0]
                },
                'end': {
                  'date': endDateTime.toISOString().split('T')[0]
                }
              }
            } else {
              var event = {
                'summary': this.editEvent.summary,
                'start': {
                  'dateTime': startDateTime.toISOString()
                },
                'end': {
                  'dateTime': endDateTime.toISOString()
                }
              }
            }
            var params = {
              'id': id,
              'event': event
            }
            axios.post('/services/updateEvent', params)
              .then((res) => {
                if (res.status == 200) {
                  getWeekView(this.month, this.year) 
                  this.displayEditEvent = false                   
                }
              })
          },
          topBarNav: function(dest) {
            var url = '/calendar/' + dest + '/' + this.dateParam
            window.location.href = url
          }
          
        }
      })
      window.onload = function() {
        // Get Month Calendar View
        
        var d = this.app._data.dateParam
        var dObject = d.split('-')
        this.app._data.day   = parseInt(dObject[1])
        this.app._data.month = parseInt(dObject[0])
        this.app._data.year  = parseInt(dObject[2])
        var d = new Date()
        d.setFullYear(dObject[2], dObject[0], dObject[1])
        this.app._data.monthName = this.app._data.monthNames[d.getMonth() - 1]
        
        this.app._data.today.day = parseInt(this.app._data.today.day)
        this.app._data.today.month = parseInt(this.app._data.today.month)
        this.app._data.today.year = parseInt(this.app._data.today.year)

        
        getWeekView(this.app._data.month, this.app._data.year)
        
      }

      window.onresize = function() {
        setHeight();
      }

      function setHeight() {
        var monthTop = document.getElementById('monthCalendar').offsetTop;
        var monthBottom = window.innerHeight;
        var numRows = Object.keys(this.app._data.weeks).length;
        console.log('nr: ' + numRows)
        document.getElementById('monthCalendarEvents').style.top = monthTop + 43  + 'px'
        document.styleSheets[1].rules[11].style.height = (monthBottom - monthTop - 43) / numRows + 'px'
      }

      function getWeekView(day, month, year) {
        if (!month || !year || !day) {
          var d = new Date()
          month = d.getMonth() + 1
          year = d.getFullYear()
          day = d.getDate()
        }

        var params = {
          'params': {
            'month': month,
            'year': year,
            'day': day
          }
        }
        console.log(params)
        axios.get('/services/getWeekView', params)
          .then ((res) => {
            console.log(res.data)
            this.app._data.monthData = res.data
            this.app._data.weeks = res.data.week
            var week = {}
            var weekObj = this.app._data.weeks;
            for (var days = 0; days < 7; days++) {
              var day = weekObj[days]
              week[day.year + '-' + day.month + '-' + day.day] = {
                hasEvent: false,
                day: day.day,
                events: {}
              }    
            }
            this.app._data.monthEvents = week
            getWeekEvents(res.data.week)
          })
      }

      function getWeekEvents(week) {

        var currentYear = this.app._data.monthData.currentYear
        var currentMonth = this.app._data.monthData.currentMonth
        var monthEvents = this.app._data.monthEvents
        var monthData = this.app._data.monthData
        var weeks = this.app._data.weeks
        var startDay = 0
        var e = {}
        for (var i = 0; i < 7; i++) {
          var sDate = new Date()
          var eDate = new Date()
          sDate.setFullYear(weeks[i].year, weeks[i].month - 1, weeks[i].day - 1)
          eDate.setFullYear(weeks[i].year, weeks[i].month - 1, weeks[i].day - 1)
          sDate.setUTCHours(0)
          eDate.setUTCHours(23)
          
          var params = {
            view: this.app._data.view,  
            start: sDate,
            end: eDate
          }
          getEvents(params, i, (err, data, index) => {
            console.log("index: " + index)
            monthEvents[Object.keys(monthEvents)[index]].hasEvent = false;
            for (var j = 0; j < data.length; j++) {
              monthEvents[Object.keys(monthEvents)[index]].events[data[j].id] = data[j]
              monthEvents[Object.keys(monthEvents)[index]].hasEvent = true;
            }
            
          })
        }
        
      }

      function getEvents(params, i, cb) {
        axios.post('/services/listEvents', params)
          .then((res) => {
            console.log("index: " + i)
            console.log(res.data)
            return cb(null, res.data, i)
          })
      }
    </script>
  </body>
</html>